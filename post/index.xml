<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on The Meow Blog</title>
    <link>https://jdmaymeow.com/post/index.xml</link>
    <description>Recent content in Post-rsses on The Meow Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Dec 2016 16:46:43 +0100</lastBuildDate>
    <atom:link href="https://jdmaymeow.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating administration</title>
      <link>https://jdmaymeow.com/post/code-advent/2016/admin-section/</link>
      <pubDate>Wed, 21 Dec 2016 16:46:43 +0100</pubDate>
      
      <guid>https://jdmaymeow.com/post/code-advent/2016/admin-section/</guid>
      <description>&lt;p&gt;All CMS will need public section what can be accessed without credentials and allow users to see content. 2nd section can be accessed only with right username and password and allow you to edit content.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Our CMS now allow only see content without credentials but using only one template and this can be problem with theming. I want have one index page for public and one for admin. So let&amp;rsquo;s upgrade our cms with admin prefix&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;routes&#34;&gt;Routes&lt;/h2&gt;

&lt;p&gt;1st update routes in your plugin, after change it will look like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Router::plugin(
    &#39;CakeContent&#39;,
    [&#39;path&#39; =&amp;gt; &#39;/cake-content&#39;],
    function (RouteBuilder $routes) {
        $routes-&amp;gt;fallbacks(DashedRoute::class);
        // I added following lines to ensure admin prefix working
        $routes-&amp;gt;prefix(&#39;admin&#39;, function ($routes) {
            $routes-&amp;gt;fallbacks(DashedRoute::class);
        });
    }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;controllers-and-templates&#34;&gt;Controllers and templates&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s say we need create new Nodes controller with prefix admin. With bake it&amp;rsquo;s easy&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/cake bake controller Nodes --prefix admin -p CakeContent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this have created new folder &lt;code&gt;src/controller/admin&lt;/code&gt; with &lt;code&gt;NodesController.php&lt;/code&gt;. Now we have 2x NodesController 1 for public and 1 for admin, but all functions are twice, so update our app and create AbstractNodesController where we will have all functions needed for both controllers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp NodesController.php AbstractNodesController.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now remove all functions from both Nodes controller and extend newly created AbstractNodesController, they will looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class NodesController extends AbstractNodesController
{

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can move add, edit and delete functions from AbstractNodesController to NodesController in admin folder because this functions are not needed in public NodesController. Now we can create theme for public Templates and still will have admin with standard templates.&lt;/p&gt;

&lt;p&gt;Ok last what we need is create templates. You can copy your existing templates to admin folder or bake new one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/cake bake template Nodes --prefix admin -p CakeContent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Easy or no? Do this with all controllers where you want have Admin section.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Password reset via email</title>
      <link>https://jdmaymeow.com/post/code-advent/2016/email-password-reset/</link>
      <pubDate>Tue, 20 Dec 2016 13:19:16 +0100</pubDate>
      
      <guid>https://jdmaymeow.com/post/code-advent/2016/email-password-reset/</guid>
      <description>&lt;p&gt;Hi. In this part we will update our CakeAuth plugin with ability to reset forgotten password via email. To ensure this we will add new cell to our databasa for email and passwordReset string,  function for change password and config for email. So we can start.
&lt;/p&gt;

&lt;h2 id=&#34;users-setup&#34;&gt;Users setup&lt;/h2&gt;

&lt;p&gt;First we need update users table witht new fields&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php/cake bake migration AddPasswdResetAndEmailToUsers email:string password_reset:string -p CakeAuth
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open currently created migration and update password_reset to allow it to be null&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$table-&amp;gt;addColumn(&#39;password_reset&#39;, &#39;string&#39;, [
            &#39;default&#39; =&amp;gt; null,
            &#39;limit&#39; =&amp;gt; 255,
            &#39;null&#39; =&amp;gt; true,
        ]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then run migrations &lt;code&gt;php/cake migrations migrate -p CakeAuth&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Update usersTable and add view.&lt;/p&gt;

&lt;p&gt;In UsersTable add&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$validator
    -&amp;gt;email(&#39;email&#39;)
    -&amp;gt;requirePresence(&#39;email&#39;, &#39;create&#39;)
    -&amp;gt;notEmpty(&#39;email&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In view add new field for email&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;echo $this-&amp;gt;Form-&amp;gt;input(&#39;email&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can try create new user, you can see we have new field for email and it&amp;rsquo;s required.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Homework:&lt;/strong&gt; Update users view and add display field for email.&lt;/p&gt;

&lt;h2 id=&#34;password-reset-forms-and-string-generator&#34;&gt;Password reset forms and string generator&lt;/h2&gt;

&lt;p&gt;Ok here we need to create new function forgottenPassword with view. Users who forget password can navigate to formular with only one inpt - email. If submited email is correct we update password_reset field for user with generated string and send link with email to another function newPassword. Ok here is forgottenPassword controller and view: Url for this will looks like &lt;code&gt;http://localhost:8765/cake-auth/users/forgotten-password&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ForgottenPassword function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function forgottenPassword()
{
    $user = $this-&amp;gt;Users-&amp;gt;newEntity();

    if($this-&amp;gt;request-&amp;gt;is(&#39;post&#39;)) {
        $passResetUser = $this-&amp;gt;Users
            -&amp;gt;findByEmail($this-&amp;gt;request-&amp;gt;data[&#39;email&#39;])
            -&amp;gt;select([&#39;id&#39;,&#39;password_reset&#39;])-&amp;gt;first();

        if($passResetUser) {
            $passResetUser-&amp;gt;password_reset = md5($passResetUser-&amp;gt;id . date(&#39;YmdH&#39;));
            $this-&amp;gt;Users-&amp;gt;save($passResetUser);
            return $this-&amp;gt;redirect([&#39;action&#39; =&amp;gt; &#39;index&#39;]);
        }
    }

    $this-&amp;gt;set(compact(&#39;user&#39;));
    $this-&amp;gt;set(&#39;_serialize&#39;, [&#39;user&#39;]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Homework:&lt;/strong&gt; Create View&lt;/p&gt;

&lt;p&gt;Email sending . Update function abowe and add this rows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;//add following lines to send string via email
$message = &#39;Your reset string is: &#39; . $passResetUser-&amp;gt;password_reset;

$email = new Email();
$email-&amp;gt;to($this-&amp;gt;request-&amp;gt;data[&#39;email&#39;])
    -&amp;gt;subject(&#39;Password reset&#39;)
    -&amp;gt;send($message);

return $this-&amp;gt;redirect([&#39;action&#39; =&amp;gt; &#39;index&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If user is found and string is saved into database we will send email with string to user&amp;rsquo;s email.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Homework:&lt;/strong&gt; Make eamil more beautifull with template.&lt;/p&gt;

&lt;p&gt;Now we can create new password function and form. Url loks like this &lt;code&gt;http://localhost:8765/cake-auth/users/new-password/&amp;lt;password-reset-string&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;New password function is here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function newPassword($resetID = null)
{
    $user = $this-&amp;gt;Users
        -&amp;gt;find()
        -&amp;gt;where([&#39;password_reset LIKE&#39; =&amp;gt; $resetID])
        -&amp;gt;select([&#39;id&#39;, &#39;password&#39;, &#39;password_reset&#39;])-&amp;gt;first();

    //Default dissalow user to change passord and hide form
    $allowPasswordChange = false;

    if ($user) {
        //when user is found allow change ans show form
        $allowPasswordChange = true;
    }

    // when we post data update user remove password reset string and save
    if ($this-&amp;gt;request-&amp;gt;is([&#39;patch&#39;, &#39;post&#39;, &#39;put&#39;])) {
        $user = $this-&amp;gt;Users-&amp;gt;patchEntity($user, $this-&amp;gt;request-&amp;gt;data);
        $user-&amp;gt;password_reset = &#39;&#39;;
        if ($this-&amp;gt;Users-&amp;gt;save($user)) {
            return $this-&amp;gt;redirect([&#39;action&#39; =&amp;gt; &#39;index&#39;]);
        }
    }


    $this-&amp;gt;set(compact(&#39;allowPasswordChange&#39;, &#39;user&#39;));
    $this-&amp;gt;set(&#39;_serialize&#39;, [&#39;allowPasswordChange&#39;, &#39;user&#39;]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Homework:&lt;/strong&gt; Create template for this function. Don&amp;rsquo;t forget to implement hiding formular when user is not exist (user has not existed password reset string)&lt;/p&gt;

&lt;p&gt;So ok. Now if user forget password it wont need to call or email administrator, he can reset password via email.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Link shortener</title>
      <link>https://jdmaymeow.com/post/code-advent/2016/link-shortener/</link>
      <pubDate>Mon, 12 Dec 2016 18:05:51 +0100</pubDate>
      
      <guid>https://jdmaymeow.com/post/code-advent/2016/link-shortener/</guid>
      <description>&lt;p&gt;Hello in this post I want to show you how you can create link shortener.&lt;/p&gt;

&lt;p&gt;All source code will be awailable at my GitHub.
&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Access to database (or installed database server)&lt;/li&gt;
&lt;li&gt;compsoer&lt;/li&gt;
&lt;li&gt;CakePHP&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;baking-application&#34;&gt;Baking application&lt;/h2&gt;

&lt;p&gt;First we have to install CakePHP skeleton.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;composer create-project --prefer-dist cakephp/app link_shortener
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command download newest version of cake php install dependencies for it. You can try if your app is running with &lt;code&gt;bin/cake server&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;database-setup&#34;&gt;Database setup&lt;/h2&gt;

&lt;p&gt;In &lt;code&gt;config/app.php&lt;/code&gt; scroll to Datasources and edit &lt;strong&gt;&lt;em&gt;default&lt;/em&gt;&lt;/strong&gt; one with your credentials.&lt;/p&gt;

&lt;h2 id=&#34;creating-initial-database-tables&#34;&gt;Creating initial database tables&lt;/h2&gt;

&lt;p&gt;I this applicaiton I want have users, links and link catedogies. Lets create them&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/cake bake migration CreateLinks name:string url:string shortened:string views:integer user_id:integer category_id:integer created modified
bin/cake bake migrations CreateUsers name:string username:string email:string password:string created modified
bin/cake bake migrations CreateCategories name:string description:string created modified

bin/cake migrations migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First 4 commands create migrations in your &lt;code&gt;config/Migrations&lt;/code&gt; folder where you can edit theme if you need. Last one will update database with your migrations.&lt;/p&gt;

&lt;h2 id=&#34;baking-views-and-more&#34;&gt;Baking views and more&lt;/h2&gt;

&lt;p&gt;Now when we have database and running cakephp application we can create Models, views and controllers for our application. In CakePHP this will be easy with CLI.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/cake bake all Links
bin/cake bake all Users
bin/cake bake all Categories
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tadaaa &amp;hellip; whe have completed our application ehm&amp;hellip; we have completed skeleton of our application. Now we can add functioanlity. This is one of awesome features of CakePHP because you can concentrate to making our application without creating functions in controller for viewing, edit, delete and index pages. If dont need some of them you can delete those.&lt;/p&gt;

&lt;h2 id=&#34;user-authentication&#34;&gt;User authentication&lt;/h2&gt;

&lt;p&gt;More on how to setup user authentication you can read at Cookbook cakephp. Setup in this app is the same so i don&amp;rsquo;t write about it here.&lt;/p&gt;

&lt;h2 id=&#34;link-shortening&#34;&gt;Link Shortening&lt;/h2&gt;

&lt;p&gt;In this stage our app can manage (create, edit, delete) and view any of our model (users, links and categories). But main feature is missing - Link Shortening. Lets create it. I use for this purpose another cool feature named Component. Components are small packages of logic which can be shared between controllers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/cake bake component Shortable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After you hit enter you can find this in &lt;code&gt;src/Controller/Component/ShortableComponent.php&lt;/code&gt; &lt;a href=&#34;https://github.com/jdmaymeow/ls_cake/blob/master/src/Controller/Component/ShortableComponent.php&#34;&gt;Complete File&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This component will create shorten format from link ID with characters from given codebase&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected $_defaultConfig = [
    //what characters we want to use  for encoding ID to string
    // Ill use all alphabet and numbers
    &#39;codeset&#39; =&amp;gt; &#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUWVXYZ&#39;
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Function for shortening number looks like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;private function _shortenNumber($number = null)
{
    //load configuration
    $config = $this-&amp;gt;config();
    $codeset = $config[&#39;codeset&#39;];
    // get length of our codeset
    $base = strlen($codeset);
    $n = $number; // given link_ID
    //shortened string
    $shortened = &#39;&#39;;
    while ($n &amp;gt; 0) {
        $shortened = substr($codeset, ($n % $base), 1) . $shortened;
        $n = floor($n/$base);
    }
    return $shortened;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now go to &lt;code&gt;src/Controller/LinksController.php&lt;/code&gt; and edit add function with following code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$link-&amp;gt;shortened = $this-&amp;gt;Shortable-&amp;gt;short($link-&amp;gt;id);
$this-&amp;gt;Links-&amp;gt;save($link);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every time when you create new link application will read ID of newly created link and update database with shortened string.&lt;/p&gt;

&lt;h2 id=&#34;link-redirecting&#34;&gt;Link redirecting&lt;/h2&gt;

&lt;p&gt;OK our application is almost done. Following function will read shortened string and redirect visitor to webpage.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function go($shortenedID = null)
{
   //we need find only one item
   $link = $this-&amp;gt;Links-&amp;gt;findByShortened($shortenedID)-&amp;gt;first();
   $this-&amp;gt;addCount($link-&amp;gt;id);
   $this-&amp;gt;redirect($link-&amp;gt;url);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can go now to &lt;code&gt;http://localhost:8765/links/go/&amp;lt;string&amp;gt;&lt;/code&gt;. Maybe you asinkg What shortened link?? It&amp;rsquo;s long. So add new route in &lt;code&gt;Config/routes.php&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;//use domain.name/go/x instead of domain.name/links/go/x
$routes-&amp;gt;connect(&#39;/go/*&#39;, [&#39;controller&#39; =&amp;gt; &#39;Links&#39;, &#39;action&#39; =&amp;gt; &#39;go&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your links looks like &lt;code&gt;http://localhost/go/&amp;lt;string&amp;gt;&lt;/code&gt; Better, isn&amp;rsquo;t it?&lt;/p&gt;

&lt;h2 id=&#34;bonus-views-count&#34;&gt;Bonus views count&lt;/h2&gt;

&lt;p&gt;If your are curious why I use  &lt;code&gt;$this-&amp;gt;addCount($link-&amp;gt;id);&lt;/code&gt; it go function, this will update view count for link everytime someone open link for redirection. Function looks like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function addCount($id = null)
{
    //Not shortened id
    $link = $this-&amp;gt;Links-&amp;gt;get($id);
    //$link-&amp;gt;views = $link-&amp;gt;views;
    //OR make it Simpler
    $link-&amp;gt;views++;
    if ($this-&amp;gt;Links-&amp;gt;save($link)) {
        return true;
    }
    return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t want to write your own applicaiton all soucre codes are located at &lt;a href=&#34;https://github.com/jdmaymeow/ls_cake&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What next? Be sure to follow twitter &lt;a href=&#34;https://twitter.com/jdmaymeow&#34;&gt;@jdmaymeow&lt;/a&gt;. Thanks for reading and come back here for more tutorials.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Taxonomy with CakePHP</title>
      <link>https://jdmaymeow.com/post/code-advent/2016/taxonomy-with-cakephp/</link>
      <pubDate>Tue, 06 Dec 2016 15:22:42 +0100</pubDate>
      
      <guid>https://jdmaymeow.com/post/code-advent/2016/taxonomy-with-cakephp/</guid>
      <description>&lt;p&gt;Hello. In this part i watn to show you how to create simple taxonomy manager to categorize all your content on webpage. It will have 3 parts. Terms (for example categories, series) for categorize content, Vocabularies - where are terms are grouped and tags.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Create plugin &lt;code&gt;bin/cake bake plugin CakeTaxonomy&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-tables&#34;&gt;Create tables&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/cake bake migration Vocabularies name:string description:text created modified -p CakeTaxonomy
bin/cake bake migration Terms name:string description:text slug:string vocabulary_id:integer created modified -p CakeTaxonomy
bin/cake bake migration Tags name:string description:text slug:string created modified -p CakeTaxonomy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/cake migrations migrate -p CakeTaxonomy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and build all items for newly created tables&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/cake bake all Vocabularies -p CakeTaxonomy
bin/cake bake all Terms -p CakeTaxonomy
bin/cake bake all Tags -p CakeTaxonomy
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;slugs&#34;&gt;Slugs&lt;/h2&gt;

&lt;p&gt;If you want to use multi-word terms in html it will be good to create slugs so install utility package &lt;code&gt;composer require jdmaymeow/cake-utility&lt;/code&gt;. and update your terms table model. Add intio initialize function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;$this-&amp;gt;addBehavior(&#39;CakeUtility.Sluggable&#39;, [
    &#39;field&#39; =&amp;gt; &#39;name&#39;
]);
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Content management with CakePHP</title>
      <link>https://jdmaymeow.com/post/code-advent/2016/cake-content/</link>
      <pubDate>Mon, 05 Dec 2016 15:10:07 +0100</pubDate>
      
      <guid>https://jdmaymeow.com/post/code-advent/2016/cake-content/</guid>
      <description>&lt;p&gt;Today I want to show you how easily you can create simple content management system with CakePHP. I want the post can have child posts so we use Tree component from cakePHP.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-we-will-need&#34;&gt;What we will need?&lt;/h2&gt;

&lt;p&gt;PHP
CakePHP
Compsoer&lt;/p&gt;

&lt;h2 id=&#34;setup-application&#34;&gt;Setup application&lt;/h2&gt;

&lt;p&gt;Download CakePHP application, you can use guide on Cakephp page, but I recomend you to use &lt;code&gt;jdmaymeow/app&lt;/code&gt; repo. This repository is updated &lt;code&gt;cakephp/app&lt;/code&gt; so you dont need edit app.controller. This repoisitory i using in all Code Advent 2016. So lets create our app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer create-project --prefer-dist jdmaymeow/app content-management
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we will need &lt;a href=&#34;https://jdmaymeow.com/code-advent/2016/cakephp-user-aauthentication.md&#34;&gt;User authentication&lt;/a&gt;, what we created in previous post. So intall it with composer&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require jdmaymeow/cake-auth
composer require jdmaymeow/cake-utility
composer require jdmaymeow/cake-taxonomy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you following tutorial you don&amp;rsquo;t need to install items above.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t forget to load plugins with &lt;code&gt;bin/cake plugin load&lt;/code&gt;. Now we have setup all what we need, and can create content management plugin.&lt;/p&gt;

&lt;h2 id=&#34;content-management-setup&#34;&gt;Content management Setup&lt;/h2&gt;

&lt;p&gt;Create plugin&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/cake bake plugin CakeContent -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create your new plugin and setup bootstrap for you.&lt;/p&gt;

&lt;h2 id=&#34;create-tables&#34;&gt;Create Tables&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;bin/cake bake migration CreateNodes title:string body:text user_id:integer category_id:integer active:boolean published:boolean parent_id:integer lft:integer rght:integer created modified -p CakeContent
bin/cake migrations migrate -p CakeContent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tables are created and now you can create models, controllers and views. &lt;code&gt;bin/cake bake all Nodes -p CakeContent&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CakePHP User authentication in few minutes</title>
      <link>https://jdmaymeow.com/post/code-advent/2016/cakephp-user-authentication/</link>
      <pubDate>Sat, 03 Dec 2016 14:21:08 +0100</pubDate>
      
      <guid>https://jdmaymeow.com/post/code-advent/2016/cakephp-user-authentication/</guid>
      <description>&lt;p&gt;Almost every page you create will need user authentication. Let&amp;rsquo;s make simple authentication which will have users and groups. For this project ill create plugin because it can be used in many other projects.
&lt;/p&gt;

&lt;h2 id=&#34;what-we-will-create&#34;&gt;What we will create&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Users and groups tables&lt;/li&gt;
&lt;li&gt;Routing for users login and logout&lt;/li&gt;
&lt;li&gt;Simple configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;environment-setup&#34;&gt;Environment setup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Composer&lt;/li&gt;
&lt;li&gt;Database server (mysql or postgresql)&lt;/li&gt;
&lt;li&gt;CakePHP&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install-application&#34;&gt;Install application&lt;/h2&gt;

&lt;p&gt;First download CakePHP &lt;code&gt;composer self-update &amp;amp;&amp;amp; composer create-project --prefer-dist cakephp/app code-advent&lt;/code&gt;. Once download is finished you will have latest version of cakephp. You can try to run it with &lt;code&gt;bin/cake server&lt;/code&gt;. Ok now go to your app folder: &lt;code&gt;cd code-advent&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;plugin&#34;&gt;Plugin&lt;/h3&gt;

&lt;p&gt;Plugins are packages of models, controllers and views. Other users can use this packages in their applications. So we create our package for user authentication. This will contain users with roles. Run following command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/cake bake plugin CakeAuth
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our plugin will be available in plugins folder. Now create migrations for users database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/cake bake migration CreateUsers username:string password:string role:string verified:boolean created modified -p CakeAuth
bin/cake bake all Users -p CakeAuth
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open &lt;code&gt;UsersTable.php&lt;/code&gt; and add following rows to validator for roles.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;-&amp;gt;add(&#39;role&#39;, &#39;inList&#39;, [
    &#39;rule&#39; =&amp;gt; [&#39;inList&#39; =&amp;gt; [&#39;admin&#39;, &#39;author&#39;]],
    &#39;message&#39; =&amp;gt; &#39;Please enter a valid role&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This rows will ensure only admin and author words can be used in our roles field when we create new user.&lt;/p&gt;

&lt;p&gt;When you try add user and then navigate to users index or view user, you will see password in plain text and this is dangerous. You have never store password in plain text, so lets fix it. Go to plugin model entity and edit &lt;code&gt;User.php&lt;/code&gt;. Add following rows to it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function _setPassword($password)
    {
        return (new DefaultPasswordHasher)-&amp;gt;hash($password);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function will return hash of your plugin. So you have done your auth plugin and now you need setup application to use it.&lt;/p&gt;

&lt;h2 id=&#34;setup-application&#34;&gt;Setup Application&lt;/h2&gt;

&lt;p&gt;Go to your application src and edit &lt;code&gt;AppController.php&lt;/code&gt;. Add following rows to initialize function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$this-&amp;gt;loadComponent(&#39;Auth&#39;, [
            &#39;authorize&#39; =&amp;gt; [&#39;Controller&#39;], // Added this line to ensure authorization
            &#39;loginRedirect&#39; =&amp;gt; [
                &#39;controller&#39; =&amp;gt; &#39;Links&#39;,
                &#39;action&#39; =&amp;gt; &#39;index&#39;
            ],
            &#39;logoutRedirect&#39; =&amp;gt; [
                &#39;controller&#39; =&amp;gt; &#39;Users&#39;,
                &#39;action&#39; =&amp;gt; &#39;login&#39;,
                &#39;home&#39;
            ]
        ]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and after initialize function add rows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function beforeFilter(Event $event)
    {
        // this are allowed action all other actions cause users must login before to see them
        $this-&amp;gt;Auth-&amp;gt;allow([&#39;index&#39;, &#39;view&#39;, &#39;display&#39;]);
    }

public function isAuthorized($user)
    {
        // Admin can access every action
        if (isset($user[&#39;role&#39;]) &amp;amp;&amp;amp; $user[&#39;role&#39;] === &#39;admin&#39;) {
            return true;
        }

        // Default deny
        return false;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you see there, add is not in allowed action. So you can&amp;rsquo;t create new users, to fix this edit your &lt;code&gt;UsersController&lt;/code&gt; and add &lt;code&gt;beforeFilter&lt;/code&gt; function with following row:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$this-&amp;gt;Auth-&amp;gt;allow([&#39;add&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;routes&#34;&gt;Routes&lt;/h2&gt;

&lt;p&gt;when you navigate to not allowed action you have to see login form but CakePHP will return error because don&amp;rsquo;t know path to &lt;code&gt;users/login&lt;/code&gt;, our login is on address &lt;code&gt;cake-auth/users/login&lt;/code&gt;. This can be fixed with add new routes to your &lt;code&gt;config/routes.php&lt;/code&gt; file in plugin folder: (append to your file)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Router::scope(&#39;/&#39;, function (RouteBuilder $routes) {
    $routes-&amp;gt;connect(&#39;/users/index&#39;, [&#39;plugin&#39; =&amp;gt; &#39;CakeAuth&#39;, &#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;index&#39;]);
    $routes-&amp;gt;connect(&#39;/users/login&#39;, [&#39;plugin&#39; =&amp;gt; &#39;CakeAuth&#39;, &#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;login&#39;]);
    $routes-&amp;gt;connect(&#39;/users/logout&#39;, [&#39;plugin&#39; =&amp;gt; &#39;CakeAuth&#39;, &#39;controller&#39; =&amp;gt; &#39;Users&#39;, &#39;action&#39; =&amp;gt; &#39;logout&#39;]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, your application is protected with user authentication. They can access only allowed actions (index, view, display), other actions are forbidden and requre users to have username and password. You can add more functionality like, email activation, or password reset.&lt;/p&gt;

&lt;p&gt;For those who was lazy to code there is a &lt;a href=&#34;https://github.com/jdmaymeow/cake-auth&#34;&gt;Github&lt;/a&gt; repository, or if you have another application made with CakePHP 3.x you can istall it with &lt;code&gt;composer require jdmaymeow/cake-auth&lt;/code&gt; and update AppController.&lt;/p&gt;

&lt;p&gt;What next? Be sure to follow twitter &lt;a href=&#34;https://twitter.com/jdmaymeow&#34;&gt;@jdmaymeow&lt;/a&gt;. Thanks for reading and come back here for more tutorials.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Simple API client in PHP</title>
      <link>https://jdmaymeow.com/post/code-advent/2016/simple-api-in-php/</link>
      <pubDate>Thu, 01 Dec 2016 15:19:16 +0100</pubDate>
      
      <guid>https://jdmaymeow.com/post/code-advent/2016/simple-api-in-php/</guid>
      <description>&lt;p&gt;Hi. This is first post in Code Advent 2016, and I want to show you how to make API calls in PHP. Here we will create our API class what can be used in any others future project. For those who are lazy to code, I have published all code on &lt;a href=&#34;https://github.com/jdmaymeow/api-client&#34;&gt;Github&lt;/a&gt;.
&lt;/p&gt;

&lt;h2 id=&#34;system-setup&#34;&gt;System setup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;composer&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;application-setup&#34;&gt;Application setup.&lt;/h2&gt;

&lt;p&gt;Create new folder where app will live. so &lt;code&gt;mkdir api-client&lt;/code&gt; and setup app for composer :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd api-client
composer init
composer install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Command &lt;code&gt;Composer init&lt;/code&gt; will ask step by step about app name, type, author and &lt;code&gt;composer install&lt;/code&gt; will install all dependencies, because we don&amp;rsquo;t have any, this will install only composer in vendor folder.&lt;/p&gt;

&lt;h3 id=&#34;server&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;First I make simple server, for testing our client. I&amp;rsquo;ll want to see server information and request (for data send via POST method). In root folder create &lt;code&gt;server.php&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;&amp;lt;?php
$data = [
    &#39;SN&#39; =&amp;gt; &#39;123456&#39;,
    &#39;SERVER&#39; =&amp;gt; $_SERVER,
    &#39;REQUEST&#39; =&amp;gt; $_REQUEST
];

echo json_encode($data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Server will return JSON encoded string with requested variables. To try yours open cmd and run command &lt;code&gt;php -S localhost:1212&lt;/code&gt; (or any port of your choice). Open brower and navigate to &lt;code&gt;http://localhost:1212/server.php&lt;/code&gt; you will see json string.&lt;/p&gt;

&lt;h3 id=&#34;api&#34;&gt;API&lt;/h3&gt;

&lt;p&gt;Now its turn for main API class. This class we will use to call our server and return response. Create new file in &lt;code&gt;src/Api.php&lt;/code&gt; and set file like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;&amp;lt;?php

namespace Jdmaymeow;

class Api {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Class name must be same as file name so my is &lt;code&gt;Api&lt;/code&gt;. Next add following variables and functions, we will use them later for create setting of our class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;private $socket;
private $protocol;
private $method;
private $data;
private $headers;

/**
 * Function setProtocol
 * @return void
 */
public function setProtocol($protocol)
{
    $this-&amp;gt;protocol = $protocol;
}

/**
 * Function setMethod
 * @return void
 */
public function setMethod($method)
{
    $this-&amp;gt;method = $method;
}

/**
 * Function setSocket
 * @return void
 */
public function setSocket($socket)
{
    $this-&amp;gt;socket = $socket;
}

/**
 * Function setData
 * @return void
 */
public function setData($data)
{
    $this-&amp;gt;data = http_build_query($data);
}

/**
 * Function setHeaders
 * @return void
 */
public function setHeaders($headers)
{
    $this-&amp;gt;headers = $headers;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next write function for create stream context. This function use before setted data and create stream context with &lt;code&gt;stream_context_create&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;private function context()
   {
       $options = [
           $this-&amp;gt;protocol =&amp;gt; [
               &#39;method&#39;  =&amp;gt; $this-&amp;gt;method,
               &#39;header&#39;=&amp;gt; $this-&amp;gt;headers,
               &#39;content&#39; =&amp;gt; $this-&amp;gt;data
           ]
       ];
       return stream_context_create($options);
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last one function is named &lt;strong&gt;go&lt;/strong&gt;. This will run request to server and return data in json or object format.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;public function go($options = [])
    {
        $response = file_get_contents($this-&amp;gt;socket, false, $this-&amp;gt;context());
        if(isset($options[&#39;json&#39;]) &amp;amp;&amp;amp; $options[&#39;json&#39;] == true) {
            return $response;
        }
        return json_decode($response);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-our-class&#34;&gt;Using our class&lt;/h2&gt;

&lt;p&gt;Now we have created API class and simple server for testing. But how to use it? Lets create &lt;code&gt;client.php&lt;/code&gt; in root of our project. In first row include composer autoload file with &lt;code&gt;require_once &#39;vendor/autoload.php&#39;;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before we can use any class we need to initialize it, so next rows in our file will be.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Jdmaymeow\Api;
$api = new Api();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those rows tell composer in what namespace is Api class located, and next one will create new instance of class. Next rows will setup class for call server. Here is example of POST method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;//Set data what you want post to the server
$data = [
    &#39;name&#39; =&amp;gt; &#39;martin&#39;,
    &#39;server&#39; =&amp;gt; &#39;test&#39;
];
$api-&amp;gt;setData($data);

// Set protocola and method
$api-&amp;gt;setProtocol(&#39;http&#39;);
$api-&amp;gt;setMethod(&#39;POST&#39;);

//Set headers
$api-&amp;gt;setHeaders(&amp;quot;Accept-language: en\r\nAuth-Key: &amp;quot;.md5(time()).&amp;quot;\r\nContent-type: application/x-www-form-urlencoded&amp;quot;);

//Call api
$api-&amp;gt;setSocket(&#39;http://localhost:1212/server.php&#39;);

//and write response in console
var_dump($api-&amp;gt;go());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In set headers example I used auth key, this will be located in &lt;code&gt;$_SERVER[&#39;http_auth_key&#39;]&lt;/code&gt; variable. This is only example. Because I&amp;rsquo;m sending data to server I addded header &lt;code&gt;Content-type: application/x-www-form-urlencoded&lt;/code&gt;, but nothing horrible will be made if you forget this. (Its return error message but add heder automatically to your context). BUT nobody wants to see any error messages in application.&lt;/p&gt;

&lt;p&gt;So run server &lt;code&gt;php -S localhost:1212&lt;/code&gt; and in another CMD run &lt;code&gt;php client.php&lt;/code&gt; and if its all OK you will see dump of server respones. At bottom you will see &lt;code&gt;REQUEST&lt;/code&gt; with your data which you have sent to server. Thats all. You can use this class in any of your application despite the fact that was made for demonstration.&lt;/p&gt;

&lt;p&gt;I have published all code on &lt;a href=&#34;https://github.com/jdmaymeow/api-client&#34;&gt;Github&lt;/a&gt; with MIT license so you can freely edit, add new functionality and use them whatever you want.&lt;/p&gt;

&lt;p&gt;What next? Be sure to follow twitter &lt;a href=&#34;https://twitter.com/jdmaymeow&#34;&gt;@jdmaymeow&lt;/a&gt;. Thanks for reading and come back here for more tutorials.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>